import pandas as pd 
import numpy as np
from matplotlib import pyplot as plt 
%matplotlib inline 

df = pd.read_csv("C:/Users/ELCOT/Desktop/RIT/Churn_Modelling.csv")
df.head()

df.shape
df.columns
df.dtypes
print(df['Geography'].unique())
print(df['Gender'].unique())
print(df['NumOfProducts'].unique())
print(df['HasCrCard'].unique())
print(df['IsActiveMember'].unique())
df.isnull().sum()
final_dataset = df[['CreditScore', 'Geography', 'Gender',  'Age', 'Tenure', 'Balance', 'NumOfProducts', 'HasCrCard', 'IsActiveMember', 'EstimatedSalary', 'Exited']]
final_dataset.head()
final_dataset = pd.get_dummies(final_dataset, drop_first = True)
final_dataset.head()
x = final_dataset.iloc[:, [0, 1, 2,3, 4, 5, 6, 7, 9, 10, 11]]
y = final_dataset.iloc[:, 8].values
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state = 42)
import tensorflow as tf 
from tensorflow import keras 
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train = sc.fit_transform (x_train)
x_test = sc.transform(x_test)
model = keras.Sequential([
    keras.layers.Dense(20, input_shape=(11,), activation='relu'),
    keras.layers.Dense(20, activation='relu'),
    keras.layers.Dense(20, activation='relu'),
    keras.layers.Dense(1, activation='sigmoid'),
])
model.compile(optimizer='adam',
              loss = 'binary_crossentropy',
              metrics = ['accuracy'])
model.fit(x_train, y_train, epochs=50)
model.predict(x_test)
model.evaluate(x_test, y_test)
yp = model.predict(x_test)
y_pred = []
for element in yp:
    if element > 0.5:
        y_pred.append(1)
    else:
        y_pred.append(0)
from sklearn.metrics import confusion_matrix, classification_report
print(classification_report(y_test, y_pred))
import seaborn as sns
cm = tf.math.confusion_matrix(labels=y_test, predictions=y_pred)

plt.figure(figsize = (10, 7))
sns.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
round((1527+196)/(1527+80+197+196), 2)
import pickle 
file = open('cus_churn_bkend.pkl', 'wb')
pickle.dump(model, file)
  
